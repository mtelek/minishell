char	*getting_word(char *input, t_operator *operators, t_lexer *lexer)
{
	static int	i;
	int			start;
	int			end;
	char		*word;

	word = 0;
	i = getting_word_i_start(input, i);
	if (input[i] && input[i+1] && is_operator(input[i], input[i + 1], operators)) //here did extra protection
	{
		start = i;
		if ((input[i] && input[i + 1] && ((input[i + 1] == '<' && input[i] == '<') //here did extra input[i+1]
					|| (input[i + 1] == '>' && input[i] == '>') || (input[i
							+ 1] == '|' && input[i] == '|'))))
			i++;
		end = ++i;
		word = creating_string(start, end, input);
		if (!word)
			error_function(3, operators, NULL, NULL);
	}
	else if ((input[i] && input[i+1] && !is_operator(input[i], input[i + 1], operators))) //here did an extra new line
	{
		word = creating_word_wout_o(input, i, operators, lexer);
		i = calculating_end(input, i, operators);
	}
	i = null_terminator_check(input, i);
	return (word);
}


//!OLD N_WORDS_CALCULATOR

int	calculating_i(t_operator *operators, char *input, int i)
{
	while (input[i] && input[i + 1] && !ft_isspace(input[i])
		&& !is_operator(input[i], input[i + 1], operators))
		i = qoutes_handler(input, i);
	while (input[i] && input[i + 1] && ft_isspace(input[i])
		&& !is_operator(input[i], input[i + 1], operators))
		i++;
	return (i);
}

int	calculating_n_words(t_operator *operators, char *input, int i, int n_words)
{
	if (input[i] && input[i + 1]
		&& !is_operator(input[i], input[i + 1], operators))
		n_words++;
	else if (input[i] && !input[i + 1] && !(input[i] == '|'
			|| input[i] == '<' || input[i] == '>') && !ft_isspace(input[i]))
		n_words++;
	return (n_words);
}

// int	number_of_words(char *input, t_operator *operators)
// {
// 	int	i;
// 	int	n_words;

// 	i = 0;
// 	n_words = 0;
// 	while (input[i] != '\0')
// 	{
// 		while (input[i] && ft_isspace(input[i]))
// 			i++;
// 		n_words = calculating_n_words(operators, input, i, n_words);
// 		i = calculating_i(operators, input, i);
// 		if (input[i] && input[i + 1]
// 			&& is_operator(input[i], input[i + 1], operators))
// 		{
// 			n_words++;
// 			printf("haha2\n");
// 			i = checking_for_doubles(input, i);
// 		}
// 		if (input[i] && (input[i] == '|' || input[i] == '<' || input[i] == '>'))
// 		{
// 			n_words++;
// 			printf("haha3\n");
// 		}
// 		if (input[i] != '\0')
// 		{
// 			// if (input[i] && !ft_isspace(input[i]) && (ft_isspace(input[i+1]) || input[i+1] == '\0'))
// 			// {
// 			// 	printf("haha4\n");
// 			// 	n_words++;
// 			// }
// 			i++;
// 		}
// 	}
// 	printf("N_WORDS:%d\n", n_words);
// 	return (n_words);
// }





int	number_of_words(char *input, t_operator *operators)
{
	int	i;
	int	n_words;
	int	in_word;

	i = 0;
	n_words = 0;
	in_word = 0;
	while (input[i] != '\0')
	{
		if (input[i] == 34 || input[i] == 39)
		{
			if ((i > 0 && ft_isspace(input[i - 1])))
				n_words++;
			i = qoutes_handler(input, i);
			if (input[i] == '\0' && (input[i-1] == 34 || input[i-1] == 39))
			{
				n_words++;
				in_word = 0;
				break;
			}
			in_word = 0;
		}
		else if (input[i] && ft_isspace(input[i]))
		{
			if (in_word)
			{
				n_words++;
				in_word = 0;
			}
		}
		else if (input[i] && input[i + 1] && ((input[i] == '|' && input[i
						+ 1] == '|') || (input[i] == '>' && input[i + 1] == '>')
				|| (input[i] == '<' && input[i + 1] == '<')))
		{
			if (in_word)
			{
				n_words++;
				in_word = 0;
			}
			n_words++;
			i++;
		}
		else if (is_single_operator(input[i], operators))
		{
			if (in_word)
			{
				n_words++;
				in_word = 0;
			}
			n_words++;
		}
		else if (!in_word)
			in_word = 1;
		if (input[i])
			i++;
	}
	if (in_word)
		n_words++;
	
	printf("N_WORDS:%d\n", n_words);
	return (n_words);
}



//EXECUTOR












#include "../Headers/minishell.h"

void    free_env_array(char **env_array)
{
    int i;

    i = -1;
    while(env_array[++i])
        free(env_array[i]);
    free(env_array);
}

void    free_bin(char **bin)
{
    int i;

    i = -1;
    while(bin[++i])
        free(bin[i]);
    free(bin);
}

void exec(t_main *main, t_cmd *own_cmd, char *path)
{
    int i;
    char *temp;
    char **env_array;

    i = 0;
    temp = env_to_str(main->env);
    env_array = ft_split(temp, '\n');
    if (main->parser->n_pipes == 0)
	{
		if (main->cmd->cmd)
		{
			execve(path, main->cmd->args, env_array);
			perror("execve"); //to something else here
            free_env_array(env_array);  
			exit(1);
		}
	}
	else if (main->parser->n_pipes != 0)
	{
		if (own_cmd != NULL && own_cmd->pid == 0)
		{
			execve(path, own_cmd->args, env_array);
			perror("execve"); //do something else here
            free_env_array(env_array);
			exit(1);
		}
	}
	while (i++ < main->parser->n_pipes)
		wait(0);
    free_env_array(env_array);
}

char *join_path(char *bin, char *d_name)
{
    char *path;
    char *temp_path;

    temp_path = ft_strjoin(bin, "/");
    path = ft_strjoin(temp_path, d_name);
    free(temp_path);
    return (path);
}

char *find_path(char *bin, char *cmd)
{
    DIR *folder;
    struct dirent *entry;
    
    entry = NULL;
    folder = opendir(bin);
    while ((entry = readdir(folder)) != NULL)
    {
        if (ft_strcmp(entry->d_name, cmd) == 0)
        {
            closedir(folder);
           return join_path(bin, entry->d_name);
        }
    }
    closedir(folder);
    return (0);
}

char   *create_path(t_main *main, t_cmd *own_cmd)
{
    char **bin;
    char *path;
    
    int i;

    i = 0;
    path = NULL;
    while (main->env && ft_strncmp(main->env->env, "PATH=", 5) != 0)
        main->env = main->env->next;
    bin = ft_split(main->env->env + 5, ':');
    while (bin[i] && !path && own_cmd)
    {
        path = find_path(bin[i], own_cmd->cmd);
        i++;
    }
    free_bin(bin);
    return (path);
        
}

void    executor(t_main *main, t_cmd *own_cmd)
{
    char *path;
        

    //What happens if main->env is NULL?
    // What if own_cmd is NULL?
    // What if the PATH variable is not set or is malformed?
    path = create_path(main, own_cmd);
    if (!path)
    {
        printf("haha\n");
        return;
    }
    if (own_cmd->pid == 0 || count_cmds(main->lexer) == 1)
    {
        if (ft_strchr(path, '/') != NULL)
            exec(main, own_cmd, path);
    }
    free(path);
}