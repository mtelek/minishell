bool	expander_check(char *str)
{
	int	dollar_sign;

	dollar_sign = find_character(str, '$');
	if (dollar_sign == -1)
		return (false);
	if (dollar_sign != -1)
	{
		printf("haha\n");
		return (true);
	}
	if (str[0] == 39)
		return (false);
	if (str[0 == 34])
		return (true);
	if (find_character(str, 34) == -1 && find_character(str, 39) == -1 && dollar_sign != -1)
		return (true);
	if (!ft_strcmp(str, "$"))
		return (false);
	return (false);
}



void	split_up_by_dollar(t_expand_node **head, t_lexer *lexer, t_main *main)
{
	int		i;
	int		start;
	int		var_start;
	char	*substr;

	i = 0;
	start = 0;
	while (lexer->str[i])
	{
		if (lexer->str[i] == '$')
		{
			// If there's text before the dollar sign, add it as a node
			if (i > start)
			{
				substr = ft_strndup(lexer->str + start, i - start);
				if (!substr)
					error_function(-1, main);
				add_node(head, substr, main);
			}

			// Mark the start of the variable name (right after '$')
			var_start = ++i;

			// Continue until you find a non-alphabetical character
			while (lexer->str[i] && (ft_isalpha(lexer->str[i]) || lexer->str[i] == '_'))
				i++;

			// Extract the variable name and add it as a node
			if (i > var_start)
			{
				substr = ft_strndup(lexer->str + var_start, i - var_start);
				if (!substr)
					error_function(-1, main);
				add_node(head, substr, main);
			}

			// Start searching from the current position again
			start = i;
		}
		else
		{
			i++;
		}
	}

	// Add any remaining text after the last dollar sign
	if (i > start)
	{
		substr = ft_strndup(lexer->str + start, i - start);
		if (!substr)
			error_function(-1, main);
		add_node(head, substr, main);
	}
}

